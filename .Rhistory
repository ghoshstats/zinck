setwd("C:/Users/Patron/Documents/zinLDA research")
getwd()
setwd("/Users/Patron/Documents/zinLDA research/")
knitr::opts_knit$set(root.dir = "/Users/Patron/Documents/zinLDA research")
#devtools::install()
library(zinck)
library(knockoff)
library(dplyr)
library(zinLDA)
library(ggplot2)
library(reshape2)
library(glmnet)
library(gridExtra)
library(randomForest)
library(cowplot)
load("count.Rdata")
dcount <- count[,order(decreasing=T,colSums(count,na.rm=T),apply(count,2L,paste,collapse=''))][,1:300] ## ordering the columns w/ decreasing abundance
## Random Subject Selection
set.seed(1)
sel_index <- rbinom(nrow(dcount),size=1,prob=0.5)
selected_samples <- which(sel_index==1)
X <- dcount[selected_samples,]
Five1 <- c(-3,3,2.5,-1,-1.5)
Five2 <- c(3,3,-2,-2,-2)
Five3 <- c(1,-1,3,-2,-1)
Five4 <- c(-1,1,2,-1,-1)
Five5 <- c(3,3,-3,-2,-1)
Five6 <- c(-1,1,-2,1,1)
Five_all <- c(Five1,Five2,Five3,Five4,Five5,Five6)
randBeta <- rep(0,300)
set.seed(1)
rand_indices <- sample(1:200,size=30,replace=FALSE)
set.seed(1)
randBeta[rand_indices] <- sample(Five_all, size=30, replace=FALSE)
n = nrow(X)
W <- log_normalize(X)
set.seed(1)
eps=rnorm(n,mean = 0, sd=1)
Y <- W %*% randBeta + eps
species_fit <- fit.zinck(X,num_clusters = 6,method = "ADVI", seed=123, alpha_param = 0.1)
theta <- species_fit$theta
beta <- species_fit$beta
X_tilde <- generateKnockoff(X,theta,beta,seed=1)
W_tilde <- log_normalize(X_tilde)
selected_species = zinck.filter(W,W_tilde,Y,model="glmnet",fdr=0.1,offset=1)
index <- rand_indices
index_est <- selected_species
neg_index <- (1:300)[-c(index)]
if(length(index_est)==0){
neg_index_est <- 1:300
} else{
neg_index_est <- (1:300)[-c(index_est)]
}
### Evaluation metrics ###
TP <- sum(index_est %in% index==TRUE) ## True Positives
FP <- sum(index_est %in% index==FALSE) ## False Positives
FN <- sum(index %in% index_est == FALSE) ## False Negatives
TN <- sum(neg_index_est %in% neg_index == TRUE) ## True Negatives
## False Discovery Proportion ##
estimated_FDR <- FP/(FP+TP)
print(estimated_FDR)
## Power ##
estimated_power <- TP/(TP+FP)
print(estimated_power)
index <- rand_indices
index_est <- selected_species
neg_index <- (1:300)[-c(index)]
if(length(index_est)==0){
neg_index_est <- 1:300
} else{
neg_index_est <- (1:300)[-c(index_est)]
}
### Evaluation metrics ###
TP <- sum(index_est %in% index==TRUE) ## True Positives
FP <- sum(index_est %in% index==FALSE) ## False Positives
FN <- sum(index %in% index_est == FALSE) ## False Negatives
TN <- sum(neg_index_est %in% neg_index == TRUE) ## True Negatives
## False Discovery Proportion ##
estimated_FDR <- FP/(FP+TP)
print(estimated_FDR)
## Power ##
estimated_power <- TP/(TP+FN)
print(estimated_power)
load("count.genus.RData")
load("meta.RData")
X <- count.genus[,order(decreasing = T,colSums(count.genus,na.rm=T),apply(count.genus,2L,paste,collapse=''))]
## Case-control status (Response) ##
Y_cat <- as.factor(meta$Group)
lookup <- c("CTR"=0,"CRC"=1)
Y <- lookup[Y_cat]
fit_CRC <- fit.zinck(X,num_clusters = 8, method="ADVI",tuned=FALSE,seed=1, alpha_param = 0.1)
fit_CRC <- fit.zinck(X,num_clusters = 8, method="ADVI",tuned=FALSE,seed=1, alpha_param = 1)
fit_CRC <- fit.zinck(X,num_clusters = 8, method="ADVI",tuned=FALSE,seed=11, alpha_param = 0.1)
theta_CRC <- fit_CRC$theta
beta_CRC <- fit_CRC$beta
X_tilde_CRC <- generateKnockoff(X,theta_CRC,beta_CRC,seed=1)
selected_genera = zinck.filter(X,X_tilde_CRC,Y,model="Random Forest",fdr=0.1,offset=0,seed=11)
selected_genera = zinck.filter(X,X_tilde_CRC,Y,model="Random Forest",fdr=0.1,offset=1,seed=11)
set.seed(11)
W <- stat.random_forest(X,X_tilde_CRC,Y)
T <- knockoff.threshold(W,fdr=0.1,offset=1)
names <- colnames(X[,which(W>=T)])
data.genus <- data.frame(impscores=sort(W[which(W>=T)],decreasing = FALSE), name=factor(names, levels=names), y=seq(length(names))*0.9)
plot.genus <- ggplot(data.genus)+geom_col(aes(impscores,name),fill="black",width=0.6)+theme_bw()+ylab("Genera")+xlab("Feature Statistic")
plot.genus
load("combo.RData")
BMI.genus <- t(abund.list[["Genus"]])
X <- BMI.genus[,order(decreasing = T,colSums(BMI.genus,na.rm=T),apply(BMI.genus,2L,paste,collapse=''))]
## Run this command to find the optimal K value ##
#optimal_k(X,kmin=2,kmax=10,seed_list=list(1,1,2,4,123,6,123,123,12))
# Jensen-Shannon divergence values
js_values <- c(0.302, 0.248, 0.32, 0.312, 0.291, 0.2800, 0.258, 0.243, 0.22472)
# K values
K_values <- seq(2, 10, by = 1)
# Creating a data frame
data <- data.frame(K_values, js_values)
# Plotting
ggplot(data, aes(x = K_values, y = js_values)) +
geom_line() +
geom_point(size = 4) +
labs(
title = "Optimal Number of Clusters Based on Jensen-Shannon Divergence",
x = "Number of Clusters (K)",
y = "Average JS Divergence"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_line(size = 0.5, linetype = 'solid', color = "grey"),
panel.grid.minor = element_line(size = 0.5, linetype = 'solid', color = "grey")
)
getwd("Users/Documents/zinLDA research/zinck")
setwd("Users/Documents/zinLDA research/zinck")
getwd()
setwd("Users/Patron/Documents/zinLDA research/zinck")
setwd("/Users/Patron/Documents/zinLDA research/zinck")
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
load("/Users/Patron/Documents/zinLDA research/zinck/data/count.genus.Rdata")
ls()
roxygen2::roxygenise()
